buildscript {
    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.2.4.RELEASE"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.10.RELEASE"
    }
}

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'idea'
apply from: "$rootDir/ext.gradle"


repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    mavenCentral()
}


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
// build时只构建jar，不构建bootJar
configure(subprojects.findAll {
    it.subprojects.empty && (it.name.endsWith('-api') || (it.name.startsWith('platform-')))
}) {
    jar { enabled = true }
    bootJar { enabled = false }
}
// 定义所有叶子节点工程共有的逻辑
configure(allprojects.findAll { it.subprojects.empty }) {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'


    dependencyManagement {
        imports {
            mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
            mavenBom('org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR6') {
//                    bomProperty 'okhttp3.version', '3.9.1'
            }
        }
    }

    dependencies {
//        implementation 'org.springframework.boot:spring-boot-starter-jersey'
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
        implementation 'org.springframework.boot:spring-boot-starter-jersey'

        compileOnly 'org.projectlombok:lombok:1.18.4'
        annotationProcessor 'org.projectlombok:lombok:1.18.4'
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    }
}

// 定义boot service工程共有的逻辑
configure(subprojects.findAll {
    it.subprojects.empty && it.name.endsWith('-service')}) {

    dependencies {


    }
}

// 定义api工程共有的逻辑
configure(subprojects.findAll { it.name.endsWith('-api') }) {
    dependencies {

    }

}


