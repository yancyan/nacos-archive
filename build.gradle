buildscript {
    repositories {
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
        }
        maven {
            url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.2.4.RELEASE"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.10.RELEASE"
    }
}

apply plugin: 'base'
apply plugin: 'org.springframework.boot'
apply from: "$rootDir/ext.gradle"


allprojects {
    repositories {
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
        }
        maven {
            url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
        }
    }
}


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// 定义所有叶子节点工程共有的逻辑
configure(allprojects.findAll { it.subprojects.empty }) {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'


    dependencyManagement {
        imports {
            mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
            mavenBom('org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR6') {
//                    bomProperty 'okhttp3.version', '3.9.1'
            }
            mavenBom('com.alibaba.cloud:spring-cloud-alibaba-dependencies:2.1.0.RELEASE')
        }
    }

    dependencies {
//        implementation 'org.springframework.boot:spring-boot-starter-jersey'
        implementation 'org.springframework.cloud:spring-cloud-context'
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
        implementation "io.github.openfeign:feign-jaxrs"
        implementation 'io.github.openfeign:feign-okhttp'
        implementation 'org.springframework.boot:spring-boot-starter-jersey'


        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config'

        // For Java 11
//        compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.7'
//        compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.2.7'
//        compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.2.7'
        // https://github.com/spotify/dockerfile-maven/issues/90
        compile group: 'javax.activation', name: 'activation', version: '1.1.1'


//        implementation 'org.springframework.boot:spring-boot-starter-actuator'
//        implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
//        implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
//        implementation 'io.micrometer:micrometer-registry-prometheus'


        compileOnly 'org.projectlombok:lombok:1.18.4'
        annotationProcessor 'org.projectlombok:lombok:1.18.4'
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    }

    bootJar{
        manifest{
            attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
        }
    }
}

configure(subprojects.findAll {
    it.subprojects.empty && (it.name.endsWith('-api') || (it.name.startsWith('platform-')))
}) {
    jar { enabled = true }
    bootJar { enabled = false }
}

// 定义boot service工程共有的逻辑
configure(subprojects.findAll {
    it.subprojects.empty && it.name.endsWith('-service')}) {

    dependencies {
//        implementation 'org.springframework.cloud:spring-cloud-starter-ribbon'
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'
//
        implementation "com.oracle.database.jdbc:ojdbc10:${ojdbc10Version}"
        implementation "com.oracle.database.nls:orai18n:${ojdbc10Version}"
    }
}

// 定义api工程共有的逻辑
configure(subprojects.findAll { it.name.endsWith('-api') }) {
    dependencies {

    }

}


